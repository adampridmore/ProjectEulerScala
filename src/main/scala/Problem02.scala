//Each new term in the Fibonacci sequence is generated by adding the previous two terms.
// By starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed four
// million, find the sum of the even-valued terms.

object Problem02 {

  def main(args: Array[String]) {
    val result = fibonacci
      .takeWhile(x => x < 4000000)
      .filter(x => x % 2 == 0)
      .sum

    println(result)
  }

  def fibonacci = fibonacci3()

  def fibonacci1: Seq[Int] = {
    def next(state: (Int, Int)) = {
      Some(state._1 + state._2, (state._2, state._1 + state._2))
    }

    val init = (0, 1)

    init._1 #:: LazyList.unfold(init)(next)
  }

//  def fibonacci2 : LazyList[Int] = 0 #:: 1 #:: fibonacci2.zip(fibonacci2.tail).map { n => n._1 + n._2 }
//  def fibonacci2 : Stream[Int] = fibonacci2.zip§§(fibonacci2.tail).map{case(a,b) => a+b}


  def fibonacci3(a: BigInt = 0, b: BigInt = 1): LazyList[BigInt] = LazyList.cons(a, fibonacci3(b, a+b))

}