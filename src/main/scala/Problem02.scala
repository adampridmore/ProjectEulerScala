//Each new term in the Fibonacci sequence is generated by adding the previous two terms.
// By starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed four
// million, find the sum of the even-valued terms.

object Problem02 {

  def main(args: Array[String]) {
    val nextFib = (a: Int, b: Int) => (b, a + b)

    def sum3(xs: List[Int]): Int = {
      if (xs.isEmpty) 0
      else xs.head + sum3(xs.tail)
    }

    val result = fibseq
      .takeWhile(x => x < 4000000)
      .filter(x => x % 2 == 0)
      .sum

    println(result)
  }

  def fibseq: Seq[Int] = {
    def next(state: (Int, Int)) = {
      Some(state._1 + state._2, (state._2, state._1 + state._2))
    }

    val init = (0, 1)

    init._1 #:: LazyList.unfold(init)(next)
  }
}